// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20190429025759_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Core.Entities.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<string>("Avatar");

                    b.Property<string>("BankAccountBank");

                    b.Property<string>("BankAccountBranch");

                    b.Property<string>("BankAccountName");

                    b.Property<string>("BankAccountNumber");

                    b.Property<DateTime?>("Birthday");

                    b.Property<int>("CityId");

                    b.Property<bool>("Deleted");

                    b.Property<string>("Email");

                    b.Property<int>("Gender");

                    b.Property<string>("IDCardCity");

                    b.Property<string>("IDCardImageBack");

                    b.Property<string>("IDCardImageFront");

                    b.Property<string>("IDCardName");

                    b.Property<string>("IDCardNumber");

                    b.Property<string>("IDCardTime");

                    b.Property<int>("MaritalStatus");

                    b.Property<string>("Name");

                    b.Property<string>("Password");

                    b.Property<string>("Phone");

                    b.Property<string>("Salt");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("Core.Entities.AccountCategory", b =>
                {
                    b.Property<int>("AccountId");

                    b.Property<int>("CategoryId");

                    b.HasKey("AccountId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("AccountCategory");
                });

            modelBuilder.Entity("Core.Entities.AccountProvider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountId");

                    b.Property<string>("Email");

                    b.Property<string>("Name");

                    b.Property<string>("Provider")
                        .IsRequired();

                    b.Property<string>("ProviderId");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("AccountProvider");
                });

            modelBuilder.Entity("Core.Entities.Agency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<bool>("Deleted");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<string>("Password");

                    b.Property<bool>("Published");

                    b.Property<string>("Salt");

                    b.Property<string>("UserCreated");

                    b.Property<string>("UserModified");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.ToTable("Agency");
                });

            modelBuilder.Entity("Core.Entities.Campaign", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AgencyId");

                    b.Property<int>("ContentType");

                    b.Property<int>("Cost");

                    b.Property<string>("Data");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<bool>("Deleted");

                    b.Property<string>("Description");

                    b.Property<int>("Gender");

                    b.Property<string>("Image");

                    b.Property<bool>("Published");

                    b.Property<int>("Status");

                    b.Property<string>("Title");

                    b.Property<int>("Type");

                    b.Property<string>("UserCreated");

                    b.Property<string>("UserModified");

                    b.HasKey("Id");

                    b.HasIndex("AgencyId");

                    b.ToTable("Campaign");
                });

            modelBuilder.Entity("Core.Entities.CampaignAccount", b =>
                {
                    b.Property<int>("CampaignId");

                    b.Property<int>("AccountId");

                    b.Property<string>("Data");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<int>("Status");

                    b.Property<string>("UserCreated");

                    b.Property<string>("UserModified");

                    b.HasKey("CampaignId", "AccountId");

                    b.HasIndex("AccountId");

                    b.ToTable("CampaignAccount");
                });

            modelBuilder.Entity("Core.Entities.CampaignCategory", b =>
                {
                    b.Property<int>("CategoryId");

                    b.Property<int>("CampaignId");

                    b.HasKey("CategoryId", "CampaignId");

                    b.HasIndex("CampaignId");

                    b.ToTable("CampaignCategory");
                });

            modelBuilder.Entity("Core.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<bool>("Deleted");

                    b.Property<string>("Name");

                    b.Property<bool>("Published");

                    b.Property<string>("UserCreated");

                    b.Property<string>("UserModified");

                    b.HasKey("Id");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("Core.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DisplayOrder");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("City");
                });

            modelBuilder.Entity("Core.Entities.District", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CityId");

                    b.Property<int?>("DisplayOrder");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("District");
                });

            modelBuilder.Entity("Core.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountId");

                    b.Property<string>("Data");

                    b.Property<int>("DataId");

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("Image");

                    b.Property<string>("Message");

                    b.Property<int>("Status");

                    b.Property<string>("Title");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("Core.Entities.Account", b =>
                {
                    b.HasOne("Core.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Entities.AccountCategory", b =>
                {
                    b.HasOne("Core.Entities.Account", "Account")
                        .WithMany("AccountCategory")
                        .HasForeignKey("AccountId");

                    b.HasOne("Core.Entities.Category", "Category")
                        .WithMany("AccountCategory")
                        .HasForeignKey("CategoryId");
                });

            modelBuilder.Entity("Core.Entities.AccountProvider", b =>
                {
                    b.HasOne("Core.Entities.Account", "Account")
                        .WithMany("AccountProvider")
                        .HasForeignKey("AccountId");
                });

            modelBuilder.Entity("Core.Entities.Campaign", b =>
                {
                    b.HasOne("Core.Entities.Agency", "Agency")
                        .WithMany("Campaign")
                        .HasForeignKey("AgencyId");
                });

            modelBuilder.Entity("Core.Entities.CampaignAccount", b =>
                {
                    b.HasOne("Core.Entities.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Entities.Campaign", "Campaign")
                        .WithMany("CampaignAccount")
                        .HasForeignKey("CampaignId");
                });

            modelBuilder.Entity("Core.Entities.CampaignCategory", b =>
                {
                    b.HasOne("Core.Entities.Campaign", "Campaign")
                        .WithMany("CampaignCategory")
                        .HasForeignKey("CampaignId");

                    b.HasOne("Core.Entities.Category", "Category")
                        .WithMany("CampaignCategory")
                        .HasForeignKey("CategoryId");
                });

            modelBuilder.Entity("Core.Entities.District", b =>
                {
                    b.HasOne("Core.Entities.City", "City")
                        .WithMany("District")
                        .HasForeignKey("CityId");
                });
#pragma warning restore 612, 618
        }
    }
}
